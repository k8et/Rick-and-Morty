{"ast":null,"code":"import { makeObservable, observable, action, computed } from 'mobx';\nclass CharacterStore {\n  constructor() {\n    this.characters = [];\n    this.nameFilter = '';\n    this.optionFilter = '';\n    this.option = '';\n    makeObservable(this, {\n      characters: observable,\n      nameFilter: observable,\n      optionFilter: observable,\n      fetchCharacters: action,\n      filteredCharacters: computed\n    });\n  }\n  fetchCharacters() {\n    fetch('https://rickandmortyapi.com/api/character').then(response => response.json()).then(data => {\n      this.characters = data.results;\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n  get filteredCharacters() {\n    let filtered = this.characters.slice();\n    if (this.nameFilter) {\n      filtered = filtered.filter(character => character.name.toLowerCase().includes(this.nameFilter.toLowerCase()));\n    }\n    if (this.optionFilter) {\n      filtered = filtered.filter(character => character.this.option.toLowerCase() === this.optionFilter.toLowerCase());\n    }\n    return filtered;\n  }\n}\nconst store = new CharacterStore();\nexport default store;","map":{"version":3,"names":["makeObservable","observable","action","computed","CharacterStore","constructor","characters","nameFilter","optionFilter","option","fetchCharacters","filteredCharacters","fetch","then","response","json","data","results","catch","error","console","filtered","slice","filter","character","name","toLowerCase","includes","this","store"],"sources":["/home/k83t/WebstormProjects/React-Project/rick-and-morty/src/store/characterStore.js"],"sourcesContent":["import { makeObservable, observable, action, computed } from 'mobx';\n\nclass CharacterStore {\n    characters = [];\n    nameFilter = '';\n    optionFilter = '';\n    option = ''\n\n    constructor() {\n        makeObservable(this, {\n            characters: observable,\n            nameFilter: observable,\n            optionFilter: observable,\n            fetchCharacters: action,\n            filteredCharacters: computed,\n        });\n    }\n\n    fetchCharacters() {\n        fetch('https://rickandmortyapi.com/api/character')\n            .then(response => response.json())\n            .then(data => {\n                this.characters = data.results;\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    }\n\n    get filteredCharacters() {\n        let filtered = this.characters.slice();\n\n        if (this.nameFilter) {\n            filtered = filtered.filter(character =>\n                character.name.toLowerCase().includes(this.nameFilter.toLowerCase())\n            );\n        }\n\n        if (this.optionFilter) {\n            filtered = filtered.filter(character =>\n                character.this.option.toLowerCase() === this.optionFilter.toLowerCase()\n            );\n        }\n        return filtered;\n    }\n}\n\nconst store = new CharacterStore();\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,MAAM;AAEnE,MAAMC,cAAc,CAAC;EAMjBC,WAAWA,CAAA,EAAG;IAAA,KALdC,UAAU,GAAG,EAAE;IAAA,KACfC,UAAU,GAAG,EAAE;IAAA,KACfC,YAAY,GAAG,EAAE;IAAA,KACjBC,MAAM,GAAG,EAAE;IAGPT,cAAc,CAAC,IAAI,EAAE;MACjBM,UAAU,EAAEL,UAAU;MACtBM,UAAU,EAAEN,UAAU;MACtBO,YAAY,EAAEP,UAAU;MACxBS,eAAe,EAAER,MAAM;MACvBS,kBAAkB,EAAER;IACxB,CAAC,CAAC;EACN;EAEAO,eAAeA,CAAA,EAAG;IACdE,KAAK,CAAC,2CAA2C,CAAC,CAC7CC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACV,IAAI,CAACV,UAAU,GAAGU,IAAI,CAACC,OAAO;IAClC,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACxB,CAAC,CAAC;EACV;EAEA,IAAIR,kBAAkBA,CAAA,EAAG;IACrB,IAAIU,QAAQ,GAAG,IAAI,CAACf,UAAU,CAACgB,KAAK,EAAE;IAEtC,IAAI,IAAI,CAACf,UAAU,EAAE;MACjBc,QAAQ,GAAGA,QAAQ,CAACE,MAAM,CAACC,SAAS,IAChCA,SAAS,CAACC,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAAC,IAAI,CAACpB,UAAU,CAACmB,WAAW,EAAE,CAAC,CACvE;IACL;IAEA,IAAI,IAAI,CAAClB,YAAY,EAAE;MACnBa,QAAQ,GAAGA,QAAQ,CAACE,MAAM,CAACC,SAAS,IAChCA,SAAS,CAACI,IAAI,CAACnB,MAAM,CAACiB,WAAW,EAAE,KAAK,IAAI,CAAClB,YAAY,CAACkB,WAAW,EAAE,CAC1E;IACL;IACA,OAAOL,QAAQ;EACnB;AACJ;AAEA,MAAMQ,KAAK,GAAG,IAAIzB,cAAc,EAAE;AAClC,eAAeyB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}